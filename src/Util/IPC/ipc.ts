/* eslint-disable @typescript-eslint/no-explicit-any */
import { RunService } from '@rbxts/services'
import qBuild from 'Util/qBuild'

assert(script.Parent)

const EventsFolderName = 'Connections'

let EventsFolder: Folder
if (RunService.IsClient()) {
	EventsFolder = script.Parent.WaitForChild(EventsFolderName) as Folder
} else {
	const foundFolder = script.Parent.FindFirstChild(EventsFolderName) as Folder
	if (foundFolder) {
		EventsFolder = foundFolder
	} else {
		EventsFolder = qBuild('Folder', script.Parent, {
			Name: EventsFolderName
		})
	}
}

abstract class IPC<T extends Instance> {
	abstract Location: Instance
	abstract getEvent(name: string): T
	abstract connect(object: T, callback: (...args: unknown[]) => unknown): RBXScriptConnection
	abstract fire(object: T, ...args: unknown[]): void

	eventMap: Map<string, T> = new Map()

	async on(name: string, callback: (...args: any[]) => any) {
		this.Location.GetChildren().forEach((object) => {
			this.eventMap.set(object.Name, object as T)
		})
		return this.connect(this.getEvent(name), callback)
	}

	async emit(name: string, ...args: any[]) {
		this.fire(this.getEvent(name), ...args)
	}
}

export default IPC
export { EventsFolder }
