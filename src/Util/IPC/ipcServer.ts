import { EventsFolder } from './ipc'
import qBuild from 'Util/qBuild'
import IPC from './ipc'

export default class IPCServer extends IPC<RemoteEvent> {
	Location = EventsFolder

	constructor() {
		super()
	}

	connect(object: RemoteEvent<Callback>, callback: (player: Player, ...args: unknown[]) => unknown) {
		return object.OnServerEvent.Connect(callback)
	}

	getEvent(name: string): RemoteEvent {
		const foundEvent = this.eventMap.get(name)
		if (!foundEvent) {
			const Event = qBuild('RemoteEvent', this.Location, {
				Name: name
			})
			this.eventMap.set(name, Event)
			return Event
		} else {
			return foundEvent
		}
	}

	async on(name: string, callback: (player: Player, ...args: unknown[]) => unknown) {
		this.Location.GetChildren().forEach((object) => {
			this.eventMap.set(object.Name, object as RemoteEvent)
		})
		return this.connect(this.getEvent(name), callback)
	}

	async emit(name: string, target: Player, ...args: unknown[]) {
		this.fire(this.getEvent(name), target, ...args)
	}

	broadcast(name: string, ...args: unknown[]) {
		this.fireBroad(this.getEvent(name), ...args)
	}

	fire(object: RemoteEvent<Callback>, target: Player, ...args: unknown[]) {
		object.FireClient(target, ...args)
	}

	fireBroad(object: RemoteEvent<Callback>, ...args: unknown[]) {
		object.FireAllClients(...args)
	}
}
