import Object from '@rbxts/object-utils'

function apply<T>(object: T, props: Partial<T>) {
	Object.entries(props).forEach(([key, value]) => {
		pcall(() => {
			object[key as never] = value as never
		})
	})
}

export default function <T extends keyof CreatableInstances>(
	Type: T,
	Parent?: Instance,
	Parameters?: Partial<CreatableInstances[T]>
): CreatableInstances[T] {
	const Inst = new Instance(Type)
	Inst.Parent = Parent
	if (Parameters) {
		apply(Inst, Parameters)
	}
	return Inst
}
